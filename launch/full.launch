<launch>
    <arg name="world_frame" default="map" />
    <arg name="robot_density" default="100" />
    <arg name="robot_height" default="0.5" />
    <arg name="robot_width" default="0.46" />
    <arg name="robot_frame" default="base_link" />
    <arg name="odom_frame" default="odom" />
    <arg name="cmd_vel_topic" default="/RosAria/cmd_vel" />
    <arg name="scan_topic" default="/RosAria/scan" />

    <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_laser_tf_publisher"
    args="0.1 0 0 0 0 -0.98480775 -0.17364818 base_link laser" /> <!-- -20 -180deg in yaw -->

    <node name="map_server" pkg="map_server" type="map_server" args="$(find rrt_project)/maps/real_map2/real_map.yaml" />

    <node pkg="amcl" type="amcl" name="amcl">
        <remap from="scan" to="$(arg scan_topic)"/>
        <param name="odom_frame_id" value="$(arg odom_frame)"/>
        <param name="base_frame_id" value="$(arg robot_frame)"/>
        <param name="global_frame_id" value="map"/>
        <param name="initial_pose_x" value="0"/>
        <param name="initial_pose_y" value="0"/>
        <param name="initial_pose_a" value="0"/>

        <param name="min_particles" value="30"/>
        <param name="max_particles" value="200"/>
        <param name="update_min_d" value="0.01"/>
        <param name="update_min_a" value="0,0074533"/> <!-- 1 degrees -->
        <param name="resample_interval" value="1"/>
        <param name="first_map_only" value="true"/>
        <param name="odom_model_type" value="diff"/>
        <param name="selective_resampling" value="true"/>
        <param name="gui_publish_rate" value="-1"/>
        <param name="odom_alpha1" value="0.1"/>
    </node>

    <node name="rviz" pkg="rviz" type="rviz" required="true" args="-d $(find rrt_project)/rviz/real_world.rviz" />

    <node name="teleop" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen" >
        <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    </node>

    <node pkg="rpic_article" type="emergency_button.py" name="emergency_button" output="screen" required="true"/>
    <!-- <include file="$(find vrpn_client_ros)/launch/sample.launch"/> -->
    <arg name="new_robot_pose_topic" default="/amcl_pose" />
    <arg name="new_robot_pose_message" default="PoseWithCovarianceStamped" />
    <arg name="new_robot_control_topic" default="/RosAria/cmd_vel" />
    <arg name="new_robot_control_message" default="Twist" />
    <arg name="x_goal" default="3" />
    <arg name="y_goal" default="0" />

    <group ns="P1">

        <param name="scan_topic" value="$(arg scan_topic)"/>
        <param name="robot_frame" value="$(arg robot_frame)"/>
        <param name="world_frame" value="$(arg world_frame)"/>
        <param name="robot_density" value="$(arg robot_density)"/>
        <param name="robot_height" value="$(arg robot_height)"/>
        <param name="robot_width" value="$(arg robot_width)"/>

        <!-- <node pkg="rpic_article" type="differential_robot_route_pose.py" name="pioneer_node" output="screen">
            <rosparam file="$(find rrt_project)/config/differential_robots/pioneer.yaml" command="load" />
            <param name="robot_pose_topic" value="$(arg new_robot_pose_topic)" />
            <param name="robot_pose_message" value="$(arg new_robot_pose_message)" />
            <param name="robot_control_topic" value="$(arg new_robot_control_topic)" />
            <param name="robot_control_message" value="$(arg new_robot_control_message)" />
        </node> -->

        <node pkg="rrt_project" type="rrt_path_node" name="rrt_path_node" output="screen" >
            <rosparam file="$(find rrt_project)/config/rrt.yaml" command="load" />
            <param name="x_goal" value="$(arg x_goal)" />
            <param name="y_goal" value="$(arg y_goal)" />
        </node>

        <node pkg="rrt_project" type="publish_robot_potential_points" name="publish_robot_points" output="screen" >
            <param name="world_frame" value="$(arg world_frame)" />
            <param name="robot_frame" value="$(arg robot_frame)" />
            <param name="robot_density" value="$(arg robot_density)" />
            <param name="robot_height" value="$(arg robot_height)" />
            <param name="robot_width" value="$(arg robot_width)" />
        </node>

        <node pkg="rrt_project" type="obstacle_avoidance_node.py" name="obstacle_avoidance_node" output="screen">
            <rosparam file="$(find rrt_project)/config/obstacle_avoidance/obstacle_avoidance_scan_node.yaml" command="load" />
            <param name="scan_topic" value="$(arg scan_topic)"/>
            <param name="robot_frame" value="$(arg robot_frame)"/>
            <param name="world_frame" value="$(arg world_frame)"/>
        </node>
    </group>
</launch>